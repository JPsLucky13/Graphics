#version 330 core

out vec4 FragColor;


uniform sampler2D reflectionTexture; 
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform sampler2D cubeMap;

uniform mat4 reflectedMvp;


uniform vec3 lightColor;

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;
in vec3 positionInModelSpace;

uniform float moveFactor;

const float waveStrength = 0.01;
const float shineDamper = 10.0;
const float reflectivity = 0.3;

void main()
{

	vec4 positionInClipSpace = reflectedMvp * vec4(positionInModelSpace,1.0);
	vec2 cubeMapUVs = (positionInClipSpace.xy / positionInClipSpace.w) * 0.5 + 0.5;
	
	vec2 ndc = (clipSpace.xy/clipSpace.w) * 0.5 + 0.5;

	//Reflection and refraction coordinates
	vec2 refractionCoords = vec2(ndc.x,ndc.y);
	vec2 reflectionCoords = vec2(ndc.x,1-ndc.y);

	float near= 0.1;
	float far = 1000.0;
	float depth = texture(depthMap, refractionCoords).r;
	float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));

	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	float waterDepth = floorDistance - waterDistance;


	//Sample the dudv map
	vec2 distortedTexCoords = (texture(dudvMap, vec2(textureCoords.x + moveFactor,textureCoords.y)).rg * 1.0);
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x,distortedTexCoords.y + moveFactor);
	vec2 totalDistortion = (texture(dudvMap,distortedTexCoords).rg * 2.0-1.0) * waveStrength * clamp(waterDepth/20.0,0.0,1.0);

	refractionCoords += totalDistortion;
	refractionCoords = clamp(refractionCoords,0.001,0.999);

	reflectionCoords += totalDistortion;
	reflectionCoords.x = clamp(reflectionCoords.x,0.001,0.999);
	reflectionCoords.y = clamp(reflectionCoords.y,1-0.999,1-0.001);

	cubeMapUVs += totalDistortion;
	cubeMapUVs = clamp(cubeMapUVs,0.001,0.999);

	vec4 cubeMapColor = texture(cubeMap, cubeMapUVs);

	//Reflection and refraction
	vec4 reflectionColor = texture(reflectionTexture,reflectionCoords);
	reflectionColor = mix(reflectionColor,cubeMapColor, 0.3);
	vec4 refractionColor = texture(refractionTexture,refractionCoords);

	vec4 normalMapColor = texture(normalMap, distortedTexCoords);
	vec3 normal = vec3(normalMapColor.r * 2.0 - 1.0, normalMapColor.b * 3.0, normalMapColor.g * 2.0 - 1.0);
	normal = normalize(normal);

	//Fresnel Calculation
	vec3 viewVector = normalize(toCameraVector);
	float refractiveFactor = dot(viewVector, normal);
	refractiveFactor = pow(refractiveFactor,5.0);

	vec3 reflectedLight = reflect(normalize(fromLightVector),normal);
	float specular = max(dot(reflectedLight, viewVector),0.0);
	specular = pow(specular,shineDamper);
	vec3 specularHighlights = lightColor * specular * reflectivity * clamp(waterDepth/5.0,0.0,1.0);

	FragColor = mix(reflectionColor,refractionColor,refractiveFactor);
	FragColor = mix(FragColor, vec4(0.0,0.3,0.5,1.0),0.2) + vec4(specularHighlights,1.0);
	FragColor.a = clamp(waterDepth/5.0,0.0,1.0);
}