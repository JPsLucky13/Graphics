#version 330 core

out vec4 FragColor;

uniform vec3 lightPosition;
uniform vec3 viewerPosition;
uniform sampler2D sampler;

in vec3 o_VertexPos;
in vec3 o_Normal;
in vec3 o_NormalCameraSpace;

//Diffuse and Specular Textures
in vec2 o_TexCoord0;
in vec2 o_TexCoord1;

float alpha = 50;

void main()
{
	vec3 diffuse = vec3(texture2D(sampler, o_TexCoord0));
	vec3 ambient = diffuse;
	vec3 specular = vec3(texture2D(sampler, o_TexCoord1));

	vec3 normalizedNormal = normalize(o_NormalCameraSpace);
	vec3 lightVector = normalize(lightPosition - o_VertexPos);
	vec3 viewerVector = normalize (viewerPosition - o_VertexPos);

	vec3 half = normalize(lightVector + viewerVector);
	vec3 o_Light = (clamp(dot(lightVector,normalizedNormal),0.0,1.0) * diffuse) + specular *  pow(clamp(dot(half,normalizedNormal),0.0,1.0),alpha) + (ambient * 0.2);

	FragColor = vec4(o_Light,1.0);
}