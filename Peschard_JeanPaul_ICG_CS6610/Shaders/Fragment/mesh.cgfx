#version 330 core

out vec4 FragColor;

uniform vec3 lightPosition;
uniform vec3 worldLightPosition;
uniform vec3 viewerPosition;

uniform sampler2D sampler;
uniform mat4 viewMatrix;

in vec4 lightSpacePosition;
in vec3 o_VertexPos;
in vec3 o_FragPos;
in vec3 o_Normal;
in vec3 o_NormalCameraSpace;

vec3 normalizedNormal;
vec3 lightVector;
vec3 worldLightDir;

float alpha = 50;

uniform vec3 diffuse;

void main()
{
	//Blinn shading
	vec3 ambient = diffuse;
	vec3 specular = vec3(1.0,1.0,1.0);

	normalizedNormal = normalize(o_NormalCameraSpace);
	lightVector = normalize(lightPosition - o_VertexPos);
	worldLightDir = normalize( worldLightPosition - o_FragPos);
	vec3 viewerVector = normalize (viewerPosition - o_VertexPos);

	vec3 half = normalize(lightVector + viewerVector);
   
	vec3 o_Light = ((clamp(dot(lightVector,normalizedNormal),0.0,1.0) * diffuse) + specular *  pow(clamp(dot(half,normalizedNormal),0.0,1.0),alpha)) + (ambient * 0.2);

	FragColor = vec4(o_Light,1.0);
}